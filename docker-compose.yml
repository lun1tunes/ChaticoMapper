version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: chatico-postgres
    environment:
      POSTGRES_DB: chatico_mapper
      POSTGRES_USER: chatico_user
      POSTGRES_PASSWORD: chatico_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - chatico-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatico_user -d chatico_mapper"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: chatico-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: chatico_user
      RABBITMQ_DEFAULT_PASS: chatico_password
      RABBITMQ_DEFAULT_VHOST: chatico_vhost
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    networks:
      - chatico-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: chatico-redis
    command: redis-server --appendonly yes --requirepass chatico_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - chatico-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Chatico Mapper App
  chatico-mapper:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chatico-mapper-app
    environment:
      # Application
      APP_NAME: "Chatico Mapper App"
      APP_VERSION: "0.1.0"
      DEBUG: "false"
      LOG_LEVEL: "INFO"
      
      # Server
      HOST: "0.0.0.0"
      PORT: "8000"
      
      # Database
      DATABASE_URL: "postgresql+asyncpg://chatico_user:chatico_password@postgres:5432/chatico_mapper"
      DATABASE_POOL_SIZE: "20"
      DATABASE_MAX_OVERFLOW: "30"
      
      # Redis
      REDIS_URL: "redis://:chatico_password@redis:6379"
      REDIS_TTL: "3600"
      
      # RabbitMQ
      RABBITMQ_URL: "amqp://chatico_user:chatico_password@rabbitmq:5672/chatico_vhost"
      RABBITMQ_EXCHANGE: "webhook_router"
      RABBITMQ_DEAD_LETTER_EXCHANGE: "webhook_router_dlx"
      RABBITMQ_MESSAGE_TTL: "86400"
      RABBITMQ_MAX_RETRIES: "5"
      
      # Instagram API (Set these in .env file)
      INSTAGRAM_APP_ID: "${INSTAGRAM_APP_ID}"
      INSTAGRAM_APP_SECRET: "${INSTAGRAM_APP_SECRET}"
      INSTAGRAM_ACCESS_TOKEN: "${INSTAGRAM_ACCESS_TOKEN}"
      INSTAGRAM_API_BASE_URL: "https://graph.instagram.com"
      INSTAGRAM_API_TIMEOUT: "30"
      INSTAGRAM_RATE_LIMIT: "200"
      
      # Webhook Security (Set these in .env file)
      WEBHOOK_SECRET: "${WEBHOOK_SECRET}"
      WEBHOOK_VERIFY_TOKEN: "${WEBHOOK_VERIFY_TOKEN}"
      WEBHOOK_MAX_SIZE: "1048576"
      
      # Security
      SECRET_KEY: "${SECRET_KEY}"
      JWT_ALGORITHM: "HS256"
      JWT_EXPIRE_MINUTES: "30"
      
      # Monitoring
      ENABLE_METRICS: "true"
      METRICS_PORT: "9090"
      
      # Rate Limiting
      RATE_LIMIT_REQUESTS: "100"
      RATE_LIMIT_WINDOW: "60"
    ports:
      - "8000:8000"
      - "9090:9090"  # Metrics port
    networks:
      - chatico-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/monitoring/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: chatico-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
    networks:
      - chatico-network
    depends_on:
      - chatico-mapper
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local

networks:
  chatico-network:
    driver: bridge
